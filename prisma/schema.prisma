// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String             @id @default(uuid())
  clerkUserId String             @unique // clerk user id
  email       String             @unique
  name        String?
  imageUrl    String?
  phone       String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  role        UserRole           @default(USER)
  savedRides  UserSavedRide[]
  testDrives  TestDriveBooking[]
}

enum UserRole {
  USER
  ADMIN
}

model Ride {
  id                String             @id @default(uuid())
  make              String
  model             String
  year              Int
  price             Decimal            @db.Decimal(10, 2)
  mileage           Int
  color             String
  fuelType          String
  transmission      String
  bikeType          String
  seats             Int?
  description       String
  status            RideStatus         @default(AVAILABLE)
  featured          Boolean            @default(false)
  images            String[] // Array of Supabase storage URLs
  savedBy           UserSavedRide[]
  testDriveBookings TestDriveBooking[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([make, model])
  @@index([bikeType])
  @@index([price])
  @@index([year])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
}

enum RideStatus {
  AVAILABLE
  UNAVAILABLE
  SOLD
}

model DealershipInfo {
  id           String        @id @default(uuid())
  name         String        @default("NextRide Motors Pvt Limited")
  address      String        @default("I-69 Karol Bagh, Central Delhi, DL 110002")
  phone        String        @default("+1 (555) 123-4567")
  email        String        @default("contact@nextride.com")
  workingHours WorkingHour[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WorkingHour {
  id           String         @id @default(uuid())
  dealershipId String
  dealership   DealershipInfo @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
  dayOfWeek    DayOfWeek
  openTime     String // Format: "HH:MM" (24-hour)
  closeTime    String // Format: "HH:MM" (24-hour)
  isOpen       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([dealershipId, dayOfWeek])
  @@index([dealershipId])
  @@index([dayOfWeek])
  @@index([isOpen])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model UserSavedRide {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rideId  String
  ride    Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)
  savedAt DateTime @default(now())

  @@unique([userId, rideId])
  @@index([userId])
  @@index([rideId])
}

model TestDriveBooking {
  id          String        @id @default(uuid())
  rideId      String
  ride        Ride          @relation(fields: [rideId], references: [id])
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  bookingDate DateTime      @db.Date
  startTime   String // Format: "HH:MM" (24-hour)
  endTime     String // Format: "HH:MM" (24-hour)
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([rideId])
  @@index([userId])
  @@index([bookingDate])
  @@index([status])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
